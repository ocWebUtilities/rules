{
	"ACPI": {
		"Add": {
			"minCount: 1": {
				"type": "error",
				"message": "You may be missing SSDTs. **[Click here for more information](https://dortania.github.io/OpenCore-Install-Guide/config.plist/clarkdale.html#acpi)**"
			},
			"Path: ^(?!((SSDT-OLA(.*)|MALD(.*)).aml))": {
				"type": "error",
				"message": "Sanity Checker detected that your config most likely comes from OLARILA. Instead we recommend following **[Dortania's OC Install Guide](https://dortania.github.io/OpenCore-Install-Guide/)** to install VANILLA macOS on your machine, however that doesn't mean you can't use our service :)"
			},
			"Path: ^(?!(DSDT.aml))": {
				"type": "error",
				"message": "You shouldn't include **{0}** in your config"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "**{0}** ACPI is disabled. Please check if you need this ACPI and enable it if it's necessary"
			}
		}
	},
	"Booter": {
		"Quirks": {
			"AvoidRuntimeDefrag: true": {
				"type": "error",
				"message": "This quirk protects from boot.efi runtime memory defragmentation. This quirk fixes UEFI runtime services support on firmware that uses SMM backing for certain services such as variable storage. It's recommended to be **enabled**"
			},
			"DevirtualiseMmio: false": {
				"type": "error",
				"message": "This quirk removes runtime attribute from certain MMIO regions. This quirk typically frees between 64 and 256 megabytes of memory, present in the debug log, and on some platforms, is the only way to boot macOS, which otherwise fails with allocation errors at the bootloader stage. Since it's dependent on your *Motherboard*, you should experiment with it **enabled** and **disabled**"
			},
			"EnableSafeModeSlide: true": {
				"type": "warning",
				"message": "If you are failing to boot into macOS Safe Mode, you can try enabling this quirk. This quirk also requires `ProvideCustomClide` to be **enabled**"
			},
			"EnableWriteUnprotector: true": {
				"type": "warning",
				"message": "**{0}** must be disabled if it's Legacy"
			},
			"ProtectUefiServices: false": {
				"type": "error",
				"message": "This quirk protects UEFI services from being overridden by the firmware. Modern firmware may update pointers to UEFI services during driver loading and may affect other quirks, however it's recommended to have this quirk **disabled**"
			},
			"ProvideCustomSlide: true": {
				"type": "warning",
				"message": "**{0}** must be disabled if it's Legacy or OpenCore log says to disable it"
			},
			"RebuildAppleMemoryMap: true": {
				"type": "error",
				"message": "This quirk generates macOS compatible memory map. It's recommended to be **enabled** if it's Legacy system or you're running macOS 10.7 and above"
			},
			"ResizeAppleGpuBars: -1": {
				"type": "info",
				"message": "This quirk reduces GPU PCI BAR sizes for compatibility with macOS. If your GPU supports *Resizable Bar* and you have this option enabled in UEFI, it's recommended to be `0` to avoid any boot issues"
			},
			"SetupVirtualMap: false": {
				"type": "warning",
				"message": "**{0}** must be disabled if it's Legacy"
			},
			"SyncRuntimePermissions: false": {
				"type": "error",
				"message": "This quirk updates memory permissions for the runtime environment. The need for this quirk is indicated by early boot failures, however it's recommended to be **disabled**"
			}
		}
	},
	"Kernel": {
		"Add": {
			"minCount: 1": {
				"type": "error",
				"message": "You may be missing Kexts. **[Click here for more information](https://dortania.github.io/OpenCore-Install-Guide/ktext.html#kexts)**"
			},
			"BundlePath: Lilu.kext": {
				"type": "error",
				"message": "**{0}** isn't included. <br/>**Purpose**: Kext and process patching <br/>**Instructions how to include**: Download **{0}** from <u>**[Lilu repo](https://github.com/acidanthera/Lilu/releases)**</u>, place it in `OC/Kexts` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"BundlePath: VirtualSMC.kext": {
				"order": "<Lilu.kext",
				"type": "error",
				"message": "**{0}** isn't included. <br/>**Purpose**: Apple SMC emulation <br/>**Instructions how to include**: Find **{0}** inside <u>**[VirtualSMC package](https://github.com/acidanthera/virtualsmc/releases)**</u>, place it in `OC/Kexts` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"BundlePath: SMCProcessor.kext": {
				"order": "<VirtualSMC.kext",
				"type": "warning",
				"message": "**{0}** isn't included. <br/>**Purpose**: **VirtualSMC** plugin for monitoring Intel CPU temperatures <br/>**Instructions how to include**: Find **{0}** inside <u>**[VirtualSMC package](https://github.com/acidanthera/virtualsmc/releases)**</u>, place it in `OC/Kexts` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"BundlePath: SMCSuperIO.kext": {
				"order": "<VirtualSMC.kext",
				"type": "warning",
				"message": "**{0}** isn't included. <br/>**Purpose**: **VirtualSMC** plugin for monitoring fan speeds <br/>**Instructions how to include**: Find **{0}** inside <u>**[VirtualSMC package](https://github.com/acidanthera/virtualsmc/releases)**</u>, place it in `OC/Kexts` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"BundlePath: WhateverGreen.kext": {
				"order": "<Lilu.kext",
				"type": "error",
				"message": "**{0}** isn't included. Please download it, place it in `OC/Kexts` and run `OC Snapshot` with **[ProperTree](https://github.com/corpnewt/ProperTree)** to add it properly into to your config"
			},
			"BundlePath: ^(?!((SMCLightSensor|SMCBatteryManager).kext))": {
				"type": "error",
				"message": "**{0}** shouldn't be included! <br/>**Purpose**: **VirtualSMC** plugin for ambient light sensor/measuring battery readout on laptop <br/>**Instructions how to remove it**: Remove this kext from `OC/Kexts` and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"BundlePath: ^(?!(USBInjectAll.kext))": {
				"type": "warning",
				"message": "**{0}** isn't recommended for injecting ports. <br/>**Purpose**: Tries to inject all ports <br/>**Recommended way**: Map your USB ports with <u>**[USBToolBox](https://github.com/USBToolBox/tool)**</u> or <u>**[USBMap](https://github.com/corpnewt/USBMap)**</u>"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "Kext **{0}** is disabled. Please refer to **[Dortania's Gathering Files](https://dortania.github.io/OpenCore-Install-Guide/ktext.html)** to see if it needs to be enabled and is needed for your hardware"
			}
		},
		"Quirks": {
			"AppleCpuPmCfgLock: false": {
				"type": "warning",
				"message": "This quirk disables `PKG_CST_CONFIG_CONTROL` MSR modification in `AppleIntelCPUPowerManagement.kext`, commonly causing early kernel panic, when it's locked from writing. It's recommended to be **enabled** if you cannot disable CFG-Lock. Applies to Ivy Bridge and older - or Broadwell and older if running macOS 10.10 or older"
			},
			"AppleXcpmCfgLock: true": {
				"type": "warning",
				"message": "**{0}** should be enabled if you cannot disable CFG-Lock"
			},
			"CustomSMBIOSGuid: false": {
				"type": "info",
				"message": "This quirk performs GUID patching for `UpdateSMBIOSMode`: `Custom` mode. It's recommended to be **disabled** if you don't own *DELL* or *VIAO* device"
			},
			"DisableIoMapper: false": {
				"type": "error",
				"message": "This quirk disables `IOMapper` support in XNU, which may conflict with the firmware implementation. It's recommended to be **enabled** if you have enabled `VT-D` in BIOS to avoid booting issues"
			},
			"LapicKernelPanic: false": {
				"type": "info",
				"message": "This quirk disables kernel panic on LAPIC interrupts. It's recommended to be **disabled** if you don't own *HP* device"
			},
			"PanicNoKextDump: true": {
				"type": "error",
				"message": "This quirk prevents kernel from printing kext dump in the panic log preventing from observing panic details. It's recommended to be **enabled**. Affects macOS 10.13 and higher"
			},
			"PowerTimeoutKernelPanic: true": {
				"type": "error",
				"message": "This quirk disables kernel panic on *setPowerState* timeout. It's recommended to be **enabled**"
			},
			"XhciPortLimit: false": {
				"type": "info",
				"message": "This quirk patches various kexts to remove USB port count limit of 15 ports. It's recommended to be **disabled** for macOS 11.3 and higher. <br/>Note: To map USB ports on `Windows` you can use <u>**[USBToolBox](https://github.com/USBToolBox/tool)**</u>.  On `macOS` you can use <u>**[USBMap](https://github.com/corpnewt/USBMap)**</u>. Unfortunately, there is no `Linux` tool that allows to do it"
			}
		}
	},
	"Misc": {
		"Debug": {
			"AppleDebug: true": {
				"type": "info",
				"message": "This quirk enables writing the `boot.efi` debug log to the OpenCore log. It's recommended to be **disabled** if you don't need it in your OpenCore log. Applies to macOS 10.15.4 and higher"
			},
			"ApplePanic: true": {
				"type": "info",
				"message": "This quirk saves macOS kernel panic output to the OpenCore root partition. It's recommended to be **disabled** if you don't need to have kernel panics on EFI partition"
			},
			"DisableWatchDog: true": {
				"type": "info",
				"message": "This quirk disables the watchdog timer. Some types of firmware may not succeed in booting the operating system quickly, especially in debug mode. This results in the watchdog timer aborting the process. It's recommended to be **enabled**"
			},
			"Target: 67": {
				"type": "info",
				"message": "This quirk is a bitmask of enabled logging targets. Common value is **{1}**, however if you want to have more or less information, **[click here for more information](https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/debug.html#config-changes)**"
			}
		},
		"Security": {
			"AllowNvramReset: true": {
				"type": "error",
				"message": "This quirk allows to reset Nvram with `⌘+OPT+P+R` key sequence or with `Nvram Reset` entry in picker. It's recommended to be **enabled**"
			},
			"AllowSetDefault: true": {
				"type": "warning",
				"message": "This quirk allows `CTRL+Enter` and `Ctrl+<Index>` handling to set the default boot option in the picker. It's recommended to be **enabled**"
			},
			"BlacklistAppleUpdate: true": {
				"type": "error",
				"message": "This quirk ignores boot options trying to update Apple peripheral firmware. It's required to be **enabled** on non-native Apple hardware. Affects macOS Big Sur and higher"
			},
			"ScanPolicy: 0": {
				"type": "info",
				"message": "For installation process, please set **{0}** to **{1}**. Bare in mind that this isn't considered secure value and such, you should learn more **[here](https://dortania.github.io/OpenCore-Post-Install/universal/security/scanpolicy.html)** to learn what value is secure"
			},
			"SecureBootModel: Default": {
				"type": "info",
				"message": "**{0}** should be **Disabled** if you want to use Nvidia Web Drivers or selected SMBIOS doesn't support Apple Secure Boot (not to be confused with Secure Boot in your BIOS)"
			},
			"Vault: Optional": {
				"type": "info",
				"message": "This quirk enables the OpenCore vaulting mechanism. It's recommended to be **Optional** if you don't have `vault.plist` file with SHA-256 hashes of all files used by OpenCore"
			}
		}
	},
	"NVRAM": {
		"WriteFlash: true": {
			"type": "error",
			"message": "This quirk enables writing to flash memory (Nvram) for all added variables. It's recommended to be **enabled**"
		}
	},
	"PlatformInfo": {
		"Generic": {
			"MLB: ^(?!(M0000000000000001))": {
				"type": "error",
				"message": "Board serial is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			},
			"ROM: ^(?!(ESIzRFVm))": {
				"type": "error",
				"message": "MAC address is missing. It's recommended to be made up with OUI (Organizationally Unique Identifier) that corresponds to real Apple interface. It's supposed to be in lowercase and without colons. Please visit **[Fixing iServices: Choose a MAC Address](https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html#choose-a-mac-address)** and **[Fixing iServices: Derive the corresponding ROM Value](https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html#derive-the-corresponding-rom-value)** for more information"
			},
			"SystemSerialNumber: ^(?!(W00000000001))": {
				"type": "error",
				"message": "Serial number is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			},
			"SystemUUID: ^(?!(00000000-0000-0000-0000-000000000000))": {
				"type": "error",
				"message": "UUID is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			}
		}
	},
	"UEFI": {
		"ConnectDrivers: true": {
			"type": "error",
			"message": "This quirk performs UEFI controller connection after driver loading. It's useful for e.g. filesystem (HfsPlus) or audio drivers. It's recommended to be **enabled**"
		},
		"Drivers": {
			"minCount: 1": {
				"type": "error",
				"message": "You may be missing Drivers. **[Click here for more information](https://dortania.github.io/OpenCore-Install-Guide/ktext.html#firmware-drivers)**"
			},
			"Path: HfsPlusLegacy.efi": {
				"type": "error",
				"message": "This driver wasn't found inside your config <br/>**Purpose**: Mounts HFS volumes (e.g. macOS Installers/Recovery) <br/>**Instructions how to include**: Find this driver inside <u>**[OpenCorePkg package](https://github.com/acidanthera/OpenCorePkg/releases)**</u>, place it in `OC/Drivers` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"Path: OpenRuntime.efi": {
				"type": "error",
				"message": "**{0}** isn't included. <br/>**Purpose**: Patches boot.efi for NVRAM fixes and better memory management<br/>**Instructions how to include**: Find **{0}** inside <u>**[OpenCorePkg package](https://github.com/acidanthera/OpenCorePkg/releases)**</u>, place it in `OC/Drivers` folder and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"Path: ^(?!(OpenCore.efi))": {
				"type": "error",
				"message": "This shouldn't be in that section! <br/>**Purpose**: Main binary responsible for booting <br/>**Instructions how to remove it**: Move this binary to root directory (`EFI/OC`) and run `OC Snapshot` in <u>**[ProperTree](https://github.com/corpnewt/ProperTree)**</u>"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "Driver **{0}** is disabled. Please refer to **[Gathering files](https://dortania.github.io/OpenCore-Install-Guide/ktext.html)** to see if it needs to be enabled and is needed for your hardware"
			}
		},
		"Input": {
			"KeySupport: false": {
				"type": "info",
				"message": "**{0}** should be enabled if your BIOS supports UEFI"
			}
		},
		"Quirks": {
			"IgnoreInvalidFlexRatio: true": {
				"type": "error",
				"message": "This quirk allows to ignore invalid values in the `MSR_FLEX_RATIO` MSR register. It's recommended to be **enabled**"
			},
			"UnblockFsConnect: false": {
				"type": "info",
				"message": "This quirk unblocks ability to install File System protocols sometimes blocked by some types of firmwares. It's recommended to be **disabled** if you don't own *HP* device"
			}
		}
	}
}
