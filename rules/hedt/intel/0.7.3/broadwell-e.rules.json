{
	"ACPI": {
		"Add": {
			"minCount: 1": {
				"type": "error",
				"message": "The `ACPI/Add` section appears to be empty, suggesting that you may be lacking SSDTs. You can discover information about SSDTs on the [Getting Started With ACPI: Choosing the SSDTs](https://dortania.github.io/Getting-Started-With-ACPI/ssdt-platform.html) page and include the necessary SSDTs for your hardware in the config. \nTo include SSDTs in config you should position them in `EFI/OC/ACPI` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**"
			},
			"Path: ^(?!((SSDT-OLA(.*)|MALD(.*)).aml))": {
				"type": "error",
				"message": "Sanity Checker detected that your config most likely comes from OLARILA. We recommend following **[Dortania's OC Install Guide](https://dortania.github.io/OpenCore-Install-Guide/)** to install VANILLA macOS on your machine, however that doesn't mean you can't use our service :)"
			},
			"Path: ^(?!(DSDT.aml))": {
				"type": "error",
				"message": "The DSDT dump of your firmware shouldn't be included, instead you should make separate patches for things you need. Please remove it from `EFI/OC/ACPI` and run `OC Snapshot` in **[ProperTree](https://github.com/corpnewt/ProperTree)**"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "The **{0}** is disabled in the config. You might find information about it on [Getting Started With ACPI: Choosing the SSDTs](https://dortania.github.io/Getting-Started-With-ACPI/ssdt-platform.html) page and ensure whether this ACPI is necessary and enable it accordingly"
			}
		}
	},
	"Booter": {
		"Quirks": {
			"AvoidRuntimeDefrag: true": {
				"type": "error",
				"message": "This quirk protects from boot.efi runtime memory defragmentation. It fixes UEFI runtime services support on firmware that uses SMM backing for certain services such as variable storage. It's recommended to be **enabled**"
			},
			"DevirtualiseMmio: false": {
				"type": "error",
				"message": "This quirk removes runtime attribute from certain MMIO regions. This quirk typically frees between 64 and 256 megabytes of memory, present in the debug log, and on some platforms, is the only way to boot macOS, which otherwise fails with allocation errors at the bootloader stage. Since it's dependent on your *Motherboard*, you should experiment with it **enabled** and **disabled**"
			},
			"EnableSafeModeSlide: true": {
				"type": "warning",
				"requires": "Booter/Quirks/ProvideCustomSlide: true",
				"message": "This quirk patches bootloader to have KASLR enabled in safe mode. If you are failing to boot into macOS safe mode, there is possibility that **enabling** it will resolve booting issues"
			},
			"EnableWriteUnprotector: true": {
				"type": "error",
				"message": "This quirk permits write access to UEFI runtime services code. It's required to be **enabled** for `OpenRuntime.efi`"
			},
			"ProtectUefiServices: false": {
				"type": "error",
				"message": "This quirk protects UEFI services from being overridden by the firmware. Modern firmware may update pointers to UEFI services during driver loading and may affect other quirks, however it's recommended to have this quirk **disabled**"
			},
			"ProvideCustomSlide: true": {
				"type": "warning",
				"message": "The need for this quirk is determined by the `OCABC: Only N/256 slide values are usable!` message in the debug log, however it's recommended to be **enabled**"
			},
			"RebuildAppleMemoryMap: false": {
				"type": "error",
				"message": "This quirk generates macOS compatible memory map. It's recommended to be **disabled**"
			},
			"ResizeAppleGpuBars: -1": {
				"type": "info",
				"message": "This quirk reduces GPU PCI BAR sizes for compatibility with macOS. If your GPU supports *Resizable Bar* and you have this option enabled in UEFI, it's recommended to be `0` to avoid any boot issues"
			},
			"SetupVirtualMap: true": {
				"type": "error",
				"message": "This quirk setups virtual memory at `SetVirtualAddresses`. Some types of firmware access memory by virtual addresses after a `SetVirtualAddresses` call, resulting in early boot crashes. The need for this quirk is determined by early boot failures, however it's recommended to be **enabled**"
			},
			"SyncRuntimePermissions: false": {
				"type": "error",
				"message": "This quirk updates memory permissions for the runtime environment. The need for this quirk is indicated by early boot failures, however it's recommended to be **disabled**"
			}
		}
	},
	"Kernel": {
		"Add": {
			"BundlePath: Lilu.kext": {
				"type": "error",
				"message": "This Kext provides patches for numerous processes and kexts. \nTo include this Kext in config you should place it in `EFI/OC/Kexts` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This Kext can be found inside **[Lilu package](https://github.com/acidanthera/Lilu/releases)**"
			},
			"BundlePath: VirtualSMC.kext": {
				"order": "<Lilu.kext",
				"type": "error",
				"message": "This Kext functions as an Apple SMC emulation. \nTo include this Kext in config you should place it in `EFI/OC/Kexts` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This Kext can be found inside **[VirtualSMC package](https://github.com/acidanthera/VirtualSMC/releases)**"
			},
			"BundlePath: SMCProcessor.kext": {
				"order": "<VirtualSMC.kext",
				"type": "warning",
				"message": "This Kext serves as a **VirtualSMC** plugin specifically for monitoring temperatures for Intel CPUs. \nTo include this Kext in config you should place it in `EFI/OC/Kexts` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This Kext can be found inside **[VirtualSMC package](https://github.com/acidanthera/VirtualSMC/releases)**"
			},
			"BundlePath: SMCSuperIO.kext": {
				"order": "<VirtualSMC.kext",
				"type": "warning",
				"message": "This Kext serves as a **VirtualSMC** plugin specifically for monitoring fan speeds. \nTo include this Kext in config you should place it in `EFI/OC/Kexts` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This Kext can be found inside **[VirtualSMC package](https://github.com/acidanthera/VirtualSMC/releases)**"
			},
			"BundlePath: WhateverGreen.kext": {
				"order": "<Lilu.kext",
				"type": "error",
				"message": "This Kext serves for graphics patching, DRM fixes, and other purposes, benefiting all GPUs, making its inclusion highly recommended. \nTo include this Kext in config you should place it in `EFI/OC/Kexts` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This Kext can be found inside **[WhateverGreen package](https://github.com/acidanthera/WhateverGreen/releases)**"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "The **{0}** is disabled in the config. You might find information about it on [Gathering Files: Kexts](https://dortania.github.io/OpenCore-Install-Guide/ktext.html#kexts) page and ensure whether this Kext is necessary and enable it accordingly"
			},
			"Comment: ^(?!([Vv]\\d+\\.\\d+(\\.\\d+)?(\\s*\\|\\s*.+)?))": {
				"type": "warning",
				"message": "It looks like your config.plist has been edited with `OCAT` or `OpenCore Configurator`. Both of these have their own problems which can, for example, cause the config to not boot properly. We recommend using **[ProperTree](https://github.com/corpnewt/ProperTree)** instead. If that's not the case, please disregard this warning"
			}
		},
		"Quirks": {
			"AppleCpuPmCfgLock: false": {
				"type": "warning",
				"message": "This quirk disables `PKG_CST_CONFIG_CONTROL` MSR modification in `AppleIntelCPUPowerManagement.kext`, commonly causing early kernel panic, when it's locked from writing. It's recommended to be **enabled** if you cannot disable CFG-Lock. Applies to Ivy Bridge and older - or Broadwell and older if running macOS 10.10 or older"
			},
			"AppleXcpmCfgLock: false": {
				"type": "warning",
				"message": "This quirk disables `PKG_CST_CONFIG_CONTROL` MSR modification in XNU, commonly causing early kernel panic, when it's locked from writing. It's recommended to be **enabled** if you cannot disable CFG-Lock. Applies to Haswell and newer"
			},
			"AppleXcpmExtraMsrs: true": {
				"type": "error",
				"message": "**{0}** must be enabled"
			},
			"CustomSMBIOSGuid: false": {
				"type": "info",
				"message": "This quirk performs GUID patching for `UpdateSMBIOSMode`: `Custom` mode. It's recommended to be **disabled** if you don't own *DELL* or *VIAO* device"
			},
			"DisableIoMapper: false": {
				"type": "warning",
				"message": "This quirk disables `IOMapper` support in XNU, which may conflict with the firmware implementation. It's recommended to be **disabled** if you don't have enabled `VT-D` in BIOS/UEFI"
			},
			"LapicKernelPanic: false": {
				"type": "info",
				"message": "This quirk disables kernel panic on LAPIC interrupts. It's recommended to be **disabled** if you don't own *HP* device"
			},
			"PanicNoKextDump: true": {
				"type": "error",
				"message": "This quirk prevents kernel from printing kext dump in the panic log preventing from observing panic details. It's recommended to be **enabled**. Affects macOS 10.13 and higher"
			},
			"PowerTimeoutKernelPanic: true": {
				"type": "error",
				"message": "This quirk disables kernel panic on *setPowerState* timeout. It's recommended to be **enabled**"
			},
			"XhciPortLimit: false": {
				"type": "info",
				"message": "This quirk patches various kexts to remove USB port count limit of 15 ports. It's recommended to be **disabled** for macOS 11.3 and higher. \nNote: To map USB ports on `Windows` you can use **[USBToolBox](https://github.com/USBToolBox/tool)**. This tool can't map EHCI controllers. On `macOS` you can use **[USBMap](https://github.com/corpnewt/USBMap)**. Unfortunately, there is no `Linux` tool that allows to do it"
			}
		}
	},
	"Misc": {
		"Debug": {
			"AppleDebug: true": {
				"type": "warning",
				"message": "**{0}** should be enabled if you want to have more debugging information"
			},
			"ApplePanic: true": {
				"type": "warning",
				"message": "**{0}** should be enabled if you want to log kernel panics to disk"
			},
			"DisableWatchDog: true": {
				"type": "warning",
				"message": "**{0}** should be enabled if you want to debug early boot issues"
			},
			"Target: 67": {
				"type": "warning",
				"message": "This quirk is a bitmask of enabled logging targets. Common value is **{1}**, however if you want more or less logging, visit **[OpenCore Debugging: Config Changes](https://dortania.github.io/OpenCore-Install-Guide/troubleshooting/debug.html#config-changes)**"
			}
		},
		"Security": {
			"AllowNvramReset: true": {
				"type": "error",
				"message": "This quirk allows to reset Nvram with `⌘+OPT+P+R` key sequence or with `Nvram Reset` entry in picker. It's recommended to be **enabled**"
			},
			"AllowSetDefault: true": {
				"type": "warning",
				"message": "This quirk allows `CTRL+Enter` and `Ctrl+<Index>` handling to set the default boot option in the picker. It's recommended to be **enabled**"
			},
			"ScanPolicy: 0": {
				"type": "warning",
				"message": "This quirk defines operating system detection policy. For installation process, you can use value **{1}**, however it enables detection of everything. You should visit **[Security and FileVault: ScanPolicy](https://dortania.github.io/OpenCore-Post-Install/universal/security/scanpolicy.html)** to calculate more secure value and see what specific bits allow"
			},
			"SecureBootModel: Default": {
				"type": "warning",
				"message": "This quirk sets Apple Secure Boot hardware model and policy. If you intend to use Nvidia Web Drivers or selected SMBIOS doesn't support **[Apple Secure Boot](https://dortania.github.io/OpenCore-Post-Install/universal/security/applesecureboot.html)**, the value is recommended to be **Disabled** to avoid boot issues"
			},
			"Vault: Optional": {
				"type": "info",
				"message": "This quirk enables the OpenCore vaulting mechanism. It's recommended to be **Optional** if you don't have `vault.plist` file with SHA-256 hashes of all files used by OpenCore"
			}
		}
	},
	"NVRAM": {
		"LegacyEnable: true": {
			"type": "error",
			"message": "**{0}** must be enabled"
		},
		"LegacyOverwrite: true": {
			"type": "error",
			"message": "**{0}** must be enabled"
		},
		"WriteFlash: true": {
			"type": "error",
			"message": "This quirk enables writing to flash memory (NVRAM) for all added variables. It's recommended to be **enabled**"
		}
	},
	"PlatformInfo": {
		"Generic": {
			"MLB: ^(?!(M0000000000000001))": {
				"type": "error",
				"message": "Board serial is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			},
			"ROM: ^(?!(ESIzRFVm))": {
				"type": "error",
				"message": "MAC address is missing. It's recommended to be made up with OUI (Organizationally Unique Identifier) that corresponds to real Apple interface. It's supposed to be in lowercase and without colons. Please visit **[Fixing iServices: Choose a MAC Address](https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html#choose-a-mac-address)** and **[Fixing iServices: Derive the corresponding ROM Value](https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html#derive-the-corresponding-rom-value)** for more information"
			},
			"SystemSerialNumber: ^(?!(W00000000001))": {
				"type": "error",
				"message": "Serial number is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			},
			"SystemUUID: ^(?!(00000000-0000-0000-0000-000000000000))": {
				"type": "error",
				"message": "UUID is missing. Please generate it corresponding to model specified in config by using **[GenSMBIOS](https://github.com/corpnewt/GenSMBIOS)**"
			}
		}
	},
	"UEFI": {
		"ConnectDrivers: true": {
			"type": "error",
			"message": "This quirk performs UEFI controller connection after driver loading. It's useful for e.g. filesystem (HfsPlus) or audio drivers. It's recommended to be **enabled**"
		},
		"Drivers": {
			"Path: (.*)HfsPlus.efi": {
				"type": "error",
				"message": "The **{0}** hasn't been found in the config. This driver can be found under **OpenHfsPlus.efi** and **HfsPlus.efi** name. It mounts HFS volumes (e.g. macOS Installer/Recovery). \nTo include this driver in config you should position it in `EFI/OC/Drivers` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. The open-source driver can be found inside **[OpenCore package](https://github.com/acidanthera/OpenCorePkg/releases)** and non open-source one inside **[OcBinaryData repository](https://github.com/acidanthera/OcBinaryData/blob/master/Drivers)**"
			},
			"Path: OpenRuntime.efi": {
				"type": "error",
				"message": "The **{0}** hasn't been found in the config. It helps OpenCore with patching `boot.efi` for NVRAM fixes and better memory management. \nTo include this driver in config you should position it in `EFI/OC/Drivers` and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**. This driver can be found inside **[OpenCorePkg package](https://github.com/acidanthera/OpenCorePkg/releases)**"
			},
			"Path: ^(?!(OpenCore.efi))": {
				"type": "error",
				"message": "The **{0}** is the main file for booting OpenCore. This file should be in the root directory (`EFI/OC`) to properly boot OpenCore. To do that, move this file to root directory and run `OC Snapshot` within **[ProperTree](https://github.com/corpnewt/ProperTree)**"
			},
			"Enabled: true": {
				"type": "warning",
				"message": "The **{0}** is disabled in the config. You might find information about it on [Gathering Files: Firmware Drivers](https://dortania.github.io/OpenCore-Install-Guide/ktext.html#firmware-drivers) page and ensure whether this driver is necessary and enable it accordingly"
			}
		},
		"Quirks": {
			"IgnoreInvalidFlexRatio: true": {
				"type": "error",
				"message": "This quirk allows to ignore invalid values in the `MSR_FLEX_RATIO` MSR register. It's recommended to be **enabled**"
			},
			"UnblockFsConnect: false": {
				"type": "info",
				"message": "This quirk unblocks ability to install File System protocols sometimes blocked by some types of firmwares. It's recommended to be **disabled** if you don't own *HP* device"
			}
		}
	}
}
